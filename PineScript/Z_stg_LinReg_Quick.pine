// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© rhapsodyz

//@version=5
strategy(title          = "LinReg 5m Quick Strategy", 
     shorttitle         = "LinReg 5m",
     overlay            = true, 
     pyramiding         = 0, 
     initial_capital    = 100000,
     default_qty_type   = strategy.percent_of_equity, 
     default_qty_value  = 100, 
     commission_type    = strategy.commission.percent, 
     commission_value   = 0.05, 
     slippage           = 2)

// #######################
// === General Numbers ===
// #######################

// === Equity Usage ===
equityUsage = input.float(0.9, title="Equity Usage Percentage", group = "General Settings")
_qty        = (strategy.equity * equityUsage) / close

// === Input A Linear Regression Channel ===
lengthInput         = input.int(60, minval = 1, maxval = 5000, title = "Length", group = "Regression Settings")
sourceInput         = input.source(hl2, title = "Source", group = "Regression Settings")
useUpperDevInput    = input.bool(true, title = "Upper Deviation", inline = "Upper Deviation", group = "Channel Settings")
upperMultInput      = input.float(2.0, title = "", inline = "Upper Deviation", group = "Channel Settings")
useLowerDevInput    = input.bool(true, title = "Lower Deviation", inline = "Lower Deviation", group = "Channel Settings")
lowerMultInput      = input.float(2.0, title = "", inline = "Lower Deviation", group = "Channel Settings")
showPearsonInput    = input.bool(false, title = "Pearson's R", inline = "Display Settings", group = "Display Settings")
extendLeftInput     = input.bool(false, title = "Extend Lines Left", inline = "Display Settings", group = "Display Settings")
extendRightInput    = input.bool(false, title = "Extend Lines Right", inline = "Display Settings", group = "Display Settings")
colorUpper          = input.color(color.new(color.blue, 85), title = "", inline = "Color Settings", group = "Color Settings")
colorLower          = input.color(color.new(color.red, 85), title = "", inline = "Color Settings", group = "Color Settings")
takeProfit          = input.float(0.618, minval = 0.382, maxval = 2.618, title = "TakeProfit", inline = "TP/SL Settings", group = "TP/SL Settings")
stopLoss            = input.float(0.206, minval = 0.127, maxval = 0.872, title = "StopLoss", inline = "TP/SL Settings", group = "TP/SL Settings")


// === Input B Divergence for Many Indicators ===


// === Input C ===


// ##################
// === Indicators ===
// ##################

// === Indicator A Linear Regression Channel ===

calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]
 
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val
        if price > upDev
            upDev := price
        price := val - low[j]
        if price > dnDev
            dnDev := price
        price := source[j]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]
    
       
[s, a, i]                           = calcSlope(sourceInput, lengthInput)
[stdDev, pearsonR, upDev, dnDev]    = calcDev(sourceInput, lengthInput, s, a, i)

startPrice      = i + s * (lengthInput - 1)
endPrice        = i
upperStartPrice = startPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
upperEndPrice   = endPrice + (useUpperDevInput ? upperMultInput * stdDev : upDev)
lowerStartPrice = startPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
lowerEndPrice   = endPrice + (useLowerDevInput ? -lowerMultInput * stdDev : -dnDev)
widthChannel    = int(2 * upperMultInput * stdDev / syminfo.mintick)
tpValue         = int(widthChannel*takeProfit)
slValue         = int(widthChannel*stopLoss)
float trend     = math.sign(startPrice - endPrice)

// === Indicator B Multiple MA ===


// === Indicator C RSI %B ===


// === Indicator D TD Sequantial ===

// #######################
// === Risk Management ===
// #######################

commissionCost = int(0.001 * close / syminfo.mintick)

// === Take-profit ===
tp1 = int(tpValue/3)
tp2 = int(2*tpValue/3)
tp3 = tpValue

_qty_pct1 = 0.3
_qty_pct2 = 0.3
_qty_pct3 = 0.3
_qty_pct4 = 0.1

// === Stop-loss ===
sl1 = - slValue
sl2 = commissionCost
sl3 = tp1
sl4 = tp2

// ##################
// === Conditions ===
// ##################

// === Condition A Linear Regression Channel ===
enterConditionLGC = tpValue/3 * 0.3 >= commissionCost
longLGC = close < endPrice - 0.2 * widthChannel
shortLGC = close > endPrice + 0.2 * widthChannel

// === Condition B ===

// === Condition C ===


// #######################
// === Order Execution ===
// #######################

// === Execute long entry ===
if enterLong
    stopLossPrice   := close * (1 - stopLoss/100)
    takeProfitPrice := close * (1 + takeProfit/100)
    strategy.entry("Long", strategy.long, qty = _qty)
    strategy.exit("exit", "Long", stop = stopLossPrice, limit = takeProfitPrice)

// === Execute long exit ===
if exitLong
    strategy.close("Long", qty_percent=100)

// === Execute short entry ===
if enterShort
    stopLossPrice   := close * (1 + stopLoss/100)
    takeProfitPrice := close * (1 - takeProfit/100)
    strategy.entry("Short", strategy.short, qty = _qty)
    strategy.exit("Exit", "Short", stop = stopLossPrice, limit = takeProfitPrice)

// === Execute short exit ===
if exitShort
    strategy.close("Short", qty_percent = 100)