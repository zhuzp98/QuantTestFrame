// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© rhapsodyz

//@version=5
strategy(title          = "[Z] LinReg Quick Strategy", 
     shorttitle         = "LinReg QcK",
     overlay            = true, 
     pyramiding         = 2, 
     initial_capital    = 1000,
     default_qty_type   = strategy.percent_of_equity, 
     default_qty_value  = 100, 
     commission_type    = strategy.commission.percent, 
     commission_value   = 0.05, 
     slippage           = 2)

// #######################
// === General Numbers ===
// #######################

// === Equity Usage ===
longDealsEnabled    = input.bool(true, title = "Long Deals", inline = "Long/Short Deals", group = "General Settings")
shortDealsEnabled   = input.bool(true, title = "Short Deals", tooltip = "Enable long/short deals. An open signal will be emited when the long/short start deal conditions are met. If this option is un-checked you will not enter into long/short positions.", inline = "Long/Short Deals", group = "General Settings")
doPercentUsage      = input.bool(true, title = "Equity Usage Percentage", inline = "Equity Usage Percentage", group = "General Settings")
equityUsage         = input.float(0.9, title="", inline = "Equity Usage Percentage", group = "General Settings")
doQuantity          = input.bool(false, title = "Order Quantity", inline = "Order Quantity", group = "General Settings")
orderQuantity       = input.float(1.0, title = "", inline = "Order Quantity", group = "General Settings")
_qty                = doPercentUsage ? (strategy.equity * equityUsage) / close : (doQuantity ? orderQuantity : na)

// === TP/SL Settings ===
group0 = "TP/SL Settings"
takeProfit          = input.float(0.786, minval = 0.382, maxval = 2.618, title = "TakeProfit", inline = "TP/SL Settings", group = group0)
stopLoss            = input.float(0.262, minval = 0.127, maxval = 0.872, title = "StopLoss", inline = "TP/SL Settings", group = group0)

// === Input A Linear Regression Channel ===
group1 = "Regression Settings"
lengthInput         = input.int(60, minval = 1, maxval = 5000, title = "Regression Length", inline = "Regression", group = group1)
sourceInput         = input.source(hl2, title = "Source", inline = "Regression", group = group1)
useUpperDevInput    = input.bool(true, title = "Upper Deviation", inline = "Upper Deviation", group = group1)
upperMultInput      = input.float(2.0, title = "", inline = "Upper Deviation", group = group1)
useLowerDevInput    = input.bool(true, title = "Lower Deviation", inline = "Lower Deviation", group = group1)
lowerMultInput      = input.float(2.0, title = "", inline = "Lower Deviation", group = group1)

// === Input B Multiple MA ===
group3      = "Multiple MA Settings"
sourceMA    = input.source(close, title = "MA Source", group = group3)
baseType    = input.string("EMA", options = ["EMA", "SMA", "HMA"], title = "Base MA Type", inline = "Base MA", group = group3)
slowType    = input.string("HMA", options = ["EMA", "SMA", "HMA"], title = "Slow MA Type", inline = "Slow MA", group = group3)
fastType    = input.string("EMA", options = ["EMA", "SMA", "HMA"], title = "Fast MA Type", inline = "Fast MA", group = group3)
baseLength  = input.int(200, minval = 60, maxval = 720, title = "Length", inline = "Base MA", group = group3)
slowLength  = input.int(100, minval = 24, maxval = 200, title = "Length", inline = "Slow MA", group = group3)
fastLength  = input.int(60, minval = 5, maxval = 60, title = "Length", inline = "Fast MA", group = group3)

// === Input C ===

// ##################
// === Indicators ===
// ##################

// === Indicator A Linear Regression Channel ===
getChannel(source, length) =>
    mid = math.sum(source, length) / length
    slope = ta.linreg(source, length, 0) - ta.linreg(source, length, 1)
    intercept  = mid - slope * math.floor(length / 2) + ((1 - (length % 2)) / 2) * slope
    endy = intercept  + slope * (length - 1) 
    dev = 0.0
    for i = 0 to length - 1
        dev := dev + math.pow(source[i] - (slope * (length - i) + intercept), 2)
    dev := math.sqrt(dev/length)
    [slope, endy, intercept, dev]

[slope, endy, intercept, stdDev] = getChannel(sourceInput, lengthInput)

startPrice      = endy - slope * (lengthInput - 1)
endPrice        = endy
upperEndPrice   = endPrice + upperMultInput * stdDev
lowerEndPrice   = endPrice - lowerMultInput * stdDev
widthChannel    = int(2 * upperMultInput * stdDev / syminfo.mintick)
tpValue         = int(widthChannel*takeProfit)
slValue         = int(widthChannel*stopLoss)

// === Indicator B Multiple MA ===

ma(src, type, length) =>
    switch type
        "SMA" => ta.sma(src, length)
        "EMA" => ta.ema(src, length)
        "HMA" => ta.wma(2*ta.wma(src, length/2)-ta.wma(src, length), math.floor(math.sqrt(length)))

baseMA = ma(close, baseType, baseLength)
slowMA = ma(close, slowType, slowLength)
fastMA = ma(close, fastType, fastLength)

// === Indicator C ===


// === Indicator D TD Sequantial ===


// #######################
// === Risk Management ===
// #######################

commissionCost = int(0.001 * close / syminfo.mintick)

// === Take-profit ===
tp1 = int(tpValue/3)
tp2 = int(2*tpValue/3)
tp3 = tpValue
tp4 = widthChannel

_qty_pct1 = 30
_qty_pct2 = 30
_qty_pct3 = 30
_qty_pct4 = 10

// === Stop-loss ===
sl1 = slValue
sl2 = commissionCost
sl3 = tp1
sl4 = tp2

// === TP/SL Stage ===
longIsActive = strategy.opentrades.size(strategy.opentrades - 1) > 0
shortIsActive = strategy.opentrades.size(strategy.opentrades - 1) < 0
emptyPosition = strategy.opentrades.size(strategy.opentrades - 1) == 0

getProfitLevel() =>
    if longIsActive
        int((high - strategy.position_avg_price) / syminfo.mintick)
    else if shortIsActive 
        int((strategy.position_avg_price - low) / syminfo.mintick) 
    else 
        0

getCurrentStage() =>
    var stage = 0
    if emptyPosition 
        stage := 0
    else if (longIsActive or shortIsActive) and getProfitLevel() < tp1
        stage := 1
    else if (longIsActive or shortIsActive) and getProfitLevel() >= tp1
        stage := 2
    else if (longIsActive or shortIsActive) and getProfitLevel() >= tp2
        stage := 3
    stage



// ##################
// === Conditions ===
// ##################

// === Condition A Linear Regression Channel ===
enterConditionLGC = tpValue/3 * 0.3 >= commissionCost
longLGC = close < endPrice - 0.25 * widthChannel
shortLGC = close > endPrice + 0.25 * widthChannel

// === Condition B Multiple MA ===
buySide = slowMA > baseMA
sellSide = slowMA < baseMA
overboughtShort = ta.crossunder(close, slowMA) and buySide
oversoldLong = ta.crossover(close, slowMA) and sellSide

// === Condition C ===


// #######################
// === Order Execution ===
// #######################
// === TP/SL in Execution ===
var float tpPrice1 = na
var float tpPrice2 = na
var float tpPrice3 = na
var float tpPrice4 = na

var float slPrice1 = na
var float slPrice2 = na
var float slPrice3 = na
var float slPrice4 = na

// === Execute long entry ===
if oversoldLong and enterConditionLGC
    strategy.entry("Long", strategy.long, qty = _qty)

// === Execute short entry ===
if overboughtShort and enterConditionLGC
    strategy.entry("Short", strategy.short, qty = _qty)
 
// === Execute exit ===
curStage = getCurrentStage()

if not emptyPosition
    if curStage == 1
//        strategy.exit("x1", loss = sl1, profit = tp1, qty_percent = _qty_pct1, comment = "sl1 or tp1")
        strategy.exit("t1", profit = tp1, qty_percent = _qty_pct1, comment = "tp1")
        strategy.exit("x1", loss = sl1, qty_percent = _qty_pct1, comment = "sl1")
    else if curStage == 2
//        strategy.exit("x2", loss = sl2, profit = tp2, qty_percent = _qty_pct2, comment = "sl2 or tp2")
        strategy.exit("t2", profit = tp2, qty_percent = _qty_pct2, comment = "tp2")
        strategy.exit("x2", loss = sl2, qty_percent = _qty_pct2, comment = "sl2")
    else if curStage == 3
//       strategy.exit("x3", loss = sl3, profit = tp3, qty_percent = _qty_pct3, comment = "sl3 or tp3")
        strategy.exit("t3", profit = tp3, qty_percent = _qty_pct3, comment = "tp3")
        strategy.exit("x3", loss = sl3, qty_percent = _qty_pct3, comment = "sl3")
    else
        strategy.exit("x4", loss = sl4, qty_percent = 100, comment = "sl4")

avgPriceColor = shortIsActive ? color.red : (longIsActive ? color.green : color.yellow)
plot(strategy.position_avg_price, color = avgPriceColor, linewidth = 2, title = "Avg Position Price")