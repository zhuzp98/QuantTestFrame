// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© rhapsodyz

//@version=5
indicator(title     = "[Z] Linear Regression Channel", 
     shorttitle     = "LinReg", 
     overlay        = true)

// ##################
// === Parameters ===
// ##################

lengthInput         = input.int(60, minval = 1, maxval = 5000, title = "Length", inline = "", group = "Regression Settings")
sourceInput         = input.source(hl2, title = "Source", inline = "", group = "Regression Settings")
useUpperDevInput    = input.bool(true, title = "Upper Deviation", inline = "Upper Deviation", group = "Channel Settings")
upperMultInput      = input.float(2.0, title = "", inline = "Upper Deviation", group = "Channel Settings")
useLowerDevInput    = input.bool(true, title = "Lower Deviation", inline = "Lower Deviation", group = "Channel Settings")
lowerMultInput      = input.float(2.0, title = "", inline = "Lower Deviation", group = "Channel Settings")
showPearsonInput    = input.bool(false, title = "Pearson's R", inline = "Display Settings", group = "Display Settings")
extendLeftInput     = input.bool(false, title = "Extend Lines Left", inline = "Display Settings", group = "Display Settings")
extendRightInput    = input.bool(false, title = "Extend Lines Right", inline = "Display Settings", group = "Display Settings")
colorUpper          = input.color(color.new(color.blue, 85), title = "", inline = "Color Settings", group = "Color Settings")
colorLower          = input.color(color.new(color.red, 85), title = "", inline = "Color Settings", group = "Color Settings")
takeProfit          = input.float(0.618, minval = 0.382, maxval = 2.618, title = "TakeProfit", inline = "TP/SL Settings", group = "TP/SL Settings")
stopLoss            = input.float(0.206, minval = 0.127, maxval = 0.872, title = "StopLoss", inline = "TP/SL Settings", group = "TP/SL Settings")

// ##################
// === Indicators ===
// ##################

extendStyle = switch
    extendLeftInput and extendRightInput    => extend.both
    extendLeftInput                         => extend.left
    extendRightInput                        => extend.right
    => extend.none

getChannel(source, length) =>
    mid = math.sum(source, length) / length
    slope = ta.linreg(source, length, 0) - ta.linreg(source, length, 1)
    intercept  = mid - slope * math.floor(length / 2) + ((1 - (length % 2)) / 2) * slope
    endy = intercept  + slope * (length - 1) 
    dev = 0.0
    for i = 0 to length - 1
        dev := dev + math.pow(source[i] - (slope * (length - i) + intercept), 2)
    dev := math.sqrt(dev/length)
    [slope, endy, intercept, dev]

[slope, endy, intercept, stdDev] = getChannel(sourceInput, lengthInput)

startPrice      = endy - slope * (lengthInput - 1)
endPrice        = endy
upperStartPrice = startPrice + upperMultInput * stdDev
upperEndPrice   = endPrice + upperMultInput * stdDev
lowerStartPrice = startPrice - lowerMultInput * stdDev
lowerEndPrice   = endPrice - lowerMultInput * stdDev
widthChannel    = int(2 * upperMultInput * stdDev / syminfo.mintick)
tpValue         = int(widthChannel*takeProfit)
slValue         = int(widthChannel*stopLoss)

// #############
// === Plots ===
// #############

// === Channel Lines ===

var line baseLine = na
var line upper    = na
var line lower    = na
if na(baseLine) and not na(startPrice)
    baseLine := line.new(bar_index - lengthInput + 1, startPrice, bar_index, endPrice, width=1, extend=extendStyle, color=color.new(colorLower, 0))
else
    line.set_xy1(baseLine, bar_index - lengthInput + 1, startPrice)
    line.set_xy2(baseLine, bar_index, endPrice)
    na 
if na(upper) and not na(upperStartPrice)
    upper := line.new(bar_index - lengthInput + 1, upperStartPrice, bar_index, upperEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(upper, bar_index - lengthInput + 1, upperStartPrice)
    line.set_xy2(upper, bar_index, upperEndPrice)
    na
if na(lower) and not na(lowerStartPrice)
    lower := line.new(bar_index - lengthInput + 1, lowerStartPrice, bar_index, lowerEndPrice, width=1, extend=extendStyle, color=color.new(colorUpper, 0))
else
    line.set_xy1(lower, bar_index - lengthInput + 1, lowerStartPrice)
    line.set_xy2(lower, bar_index, lowerEndPrice)
    na
linefill.new(upper, baseLine, color = colorUpper)
linefill.new(baseLine, lower, color = colorLower)

// === Channel Dimensions ===

slopePlot  = plot(slope, precision = 4, color = color.black, editable = false, display = display.status_line)
widthPlot  = plot(widthChannel, precision = 0, color = color.black, editable = false, display = display.status_line)
tpPlot     = plot(tpValue, precision = 0, color = color.green, editable = false, display = display.status_line)
slPlot     = plot(slValue, precision = 0, color = color.blue, editable = false, display = display.status_line)

// ##############
// === Alerts ===
// ##############

float trend = math.sign(startPrice - endPrice)
alertcondition(sourceInput > line.get_price(upper, bar_index) or sourceInput < line.get_price(lower, bar_index), title='Regression Channel Exited', message="The price movement has exited Regression Channel's bounds")
alertcondition(trend[1] >= 0 and trend < 0, title='Switched to Uptrend', message='The Regression Channel trend switched from Downtrend to Uptrend')
alertcondition(trend[1] <= 0 and trend > 0, title='Switched to Downtrend', message='The Regression Channel trend switched from Uptrend to Downtrend')