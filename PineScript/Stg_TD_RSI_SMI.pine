// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © rhapsodyz

//@version=5


// #########################
// === Strategy Settings ===
// #########################

strategy(title = "TD RSI Strategy", 
     overlay            = true, 
     pyramiding         = 1, 
     initial_capital    = 10000, 
     default_qty_type   = strategy.percent_of_equity, 
     default_qty_value  = 100, 
     commission_type    = strategy.commission.percent, 
     commission_value   = 0.04, 
     slippage           = 2)

strat_dir_input = 
     input.string(title ="Strategy Direction", 
         defval         ="long", 
         options        =["long", "short", "all"])

strat_dir_value = 
     strat_dir_input == "long" ? strategy.direction.long : 
     strat_dir_input == "short" ? strategy.direction.short : 
     strategy.direction.all

strategy.risk.allow_entry_in(strat_dir_value)

// #######################
// === General Numbers ===
// #######################

// === Equity Usage ===
equityUsage = input(0.9, title="Equity Usage Percentage")
_qty = (strategy.equity * equityUsage) / close

// === Input A TD Sequential ===
tdSetup() =>
    var int setupCount = 0
    var int setupDirection = 0
    if close > close[4]
        if setupDirection != 1
            setupCount := 1
            setupDirection := 1
        else
            setupCount += 1
    else if close < close[4]
        if setupDirection != -1
            setupCount := -1
            setupDirection := -1
        else
            setupCount -= 1
    else
        setupCount := 0
    [setupCount, setupDirection]

// === Input B RSI ===
rsiLength       = input.int(14, minval=1, title="RSI Length", group="RSI Settings")
rsiSource       = input.source(hlc3, "RSI Source", group="RSI Settings")
rsiMALength     = input.int(14, title="MA Length", group="Boll Settings")
rsiBollMult     = input.float(2.0, minval=0.001, maxval=50, title="Boll StdDev", group="Boll Settings")
showBreakout    = input.bool(true, title="Show Breakout", group="RSI Settings")
rsiDivBreakLow  = input.float(1.0, minval=0.001, maxval=3, title="Breakout Value Low", group="RSI Settings")
rsiDivBreakHigh = input.float(1.3, minval=0.001, maxval=3, title="Breakout Value High", group="RSI Settings")
rsiRawBreak     = input.int(25, minval = 1, title = "RSI Raw Breakout Value", group = "RSI Settings")


// ##################
// === Indicators ===
// ##################

// === Indicator A TD Sequential ===
[setup, direction] = tdSetup()

// === Indicator B RSI ===
up          = ta.rma(math.max(ta.change(rsiSource), 0), rsiLength)
down        = ta.rma(-math.min(ta.change(rsiSource), 0), rsiLength)
rsi         = down == 0 ? 50 : up == 0 ? -50 : 50 - (100 / (1 + up / down))
rsiMA       = ta.sma(rsi, rsiMALength)
rsiDiv      = (rsi - rsiMA) / (ta.stdev(rsi, rsiMALength) * rsiBollMult)
break_up    = false
break_down  = false

if rsiDiv <= -rsiDivBreakLow and rsiDiv >= -rsiDivBreakHigh and rsi <= -rsiRawBreak and showBreakout
    break_down := true

if rsiDiv >= rsiDivBreakLow and rsiDiv <= rsiDivBreakHigh and rsi >= rsiRawBreak and showBreakout
    break_up := true

// ##################
// === Conditions ===
// ##################

// === Condition A TD ===
tdLong  = setup == -9
tdShort = setup == 9

// === Condition B RSI ===
rsiLong  = break_down
rsiShort = break_up

// #######################
// === Risk Management ===
// #######################

per(pcnt) =>
    strategy.position_size != 0 ? math.round(pcnt / 100 * strategy.position_avg_price / syminfo.mintick) : float(na)

q1=input.int(title=" qty_percent1", defval=25, minval=1)
q2=input.int(title=" qty_percent2", defval=25, minval=1)
q3=input.int(title=" qty_percent3", defval=25, minval=1)



// === Stop-loss ===
stoploss = input.float(title="Stop Loss", defval = 15, minval = 0.01)
los = per(stoploss)

// === Take-profit ===
tp1=input.float(title=" Take profit1", defval=3, minval=0.01)
tp2=input.float(title=" Take profit2", defval=5, minval=0.01)
tp3=input.float(title=" Take profit3", defval=7, minval=0.01)
tp4=input.float(title=" Take profit4", defval=10, minval=0.01)



// #######################
// === Order Execution ===
// #######################

// === United Condition ===
longSignal  = rsiLong
shortSignal = tdShort or rsiShort
longExit    = tdShort or rsiShort
shortExit   = tdLong or rsiLong

tdEntry = input.bool(true, title = "TD Entry")
rsiEntry = input.bool(true, title = "RSI Entry")

// === Execute long entry ===
if longSignal 
    strategy.entry("Long", strategy.long, qty = _qty)

if shortSignal 
    strategy.entry("Short", strategy.short, qty = _qty)

if longExit
    strategy.exit("LongExit", "Long", qty_percent = 100)
else
    strategy.exit("x1", qty_percent = q1, profit = per(tp1), loss = los)
    strategy.exit("x2", qty_percent = q2, profit = per(tp2), loss = los)
    strategy.exit("x3", qty_percent = q3, profit = per(tp3), loss = los)
    strategy.exit("x4", profit = per(tp4), loss = los)

if ShortExit
    strategy.exit("ShortExit", "Short", qty_percent = 100)
else
    strategy.exit("x1", qty_percent = q1, profit = per(tp1), loss = los)
    strategy.exit("x2", qty_percent = q2, profit = per(tp2), loss = los)
    strategy.exit("x3", qty_percent = q3, profit = per(tp3), loss = los)
    strategy.exit("x4", profit = per(tp4), loss = los)
